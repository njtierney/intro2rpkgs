# Using `devtools::check()`

So far we have written a very basic R package structure, and given it some documentation and examples.

Now, let's see if we can get this to pass the bar - could this go onto CRAN?

We can do this with `devtools::check()`

This might seem advanced, and in some ways it is - `devtools::check()` does a lot of things. What you need to know right now is essentially that it is running many tests to check if it is in the right standard, that it has the right files, and they are properly written.

Let's run it!

:::{.callout-tip, title="Your turn: run `devtools::check()`"} 1. Run `devtools::check()` in the console 2. See what checks we need to fix :::

You should see something like the following when you run `devtools::check()`:

![](images/clipboard-3990846964.gif)

The key output from our check is the following message:

```         
── R CMD check results ──────────────────────────────────────────── praiseme 0.0.0.9000 ────
Duration: 4.9s

❯ checking DESCRIPTION meta-information ... WARNING
  Invalid license file pointers: LICENSE

0 errors ✔ | 1 warning ✖ | 0 notes ✔
```

This tells us something is going on with the LICENSE file. Note that in the DESCRIPTION file we have the following:

``` dcf
Package: praiseme
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0.9000
Authors@R: 
    person("Nicholas", "Tierney", , "nicholas.tierney@gmail.com", role = c("aut", "cre"),
           comment = c(ORCID = "https://orcid.org/0000-0003-1460-8722"))
Description: What the package does (one paragraph).
License: MIT + file LICENSE
Encoding: UTF-8
Language: en-GB
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.3
```

And in the `License` field we have:

```         
License: MIT + file LICENSE
```

And when we look at the files we have in our repo, we see:

![](images/clipboard-1736992852.png)

or

```         
├── .Rbuildignore
├── .gitignore
├── DESCRIPTION
├── NAMESPACE
├── R
│   └── praise.R
├── man
│   └── praise.Rd
└── praiseme.Rproj
```

There isn't a LICENSE file anywhere!

It's important ti pick a license for your code sot hat others know how they should give you attribution. A good license is the MIT license, which essentially allows people to use yoru code for free and to commercialise it, but you cannot be held liable. I am not a lawyer, however, I would recommend that you choose your own license. I'd recommend reading the [chapter on licenses](https://r-pkgs.org/license.html) in the R packages book, and also consulting the [TLDR legal page](https://www.tldrlegal.com/).

In any case, for our example, the MIT license is totally fine. We can apply this by running `usethis::use_mit_license()`:

:::{.callout-tip, title="Your turn: `usethis::use_mit_license()`"} 1. Run: `usethis::use_mit_license()` 2. Run `devtools::check()` :::

Running `usethis::use_mit_license()` we see the following text:

```         
✔ Writing LICENSE.
✔ Writing LICENSE.md.
✔ Adding "^LICENSE\\.md$" to .Rbuildignore.
```

Which creates some files, and adds some text to .Rbuildignore.

![](images/clipboard-2835641015.gif)

Now, let's see if this solved our `check()` problem.

:::{.callout-tip, title="Your turn: Run `devtools::check()` again"} 1. Run `devtools::check()` 2. Has this returned all ticks? :::

All going well, this will have resulted in us having our package pass all checks!

You should have an output like this at the end of it:

```         
── R CMD check results ──────────────────────────────────────────── praiseme 0.0.0.9000 ────
Duration: 5.6s

0 errors ✔ | 0 warnings ✔ | 0 notes ✔
```

As a gif, here's what that will look like:

![](images/clipboard-3964492416.gif)

Well done! You have written an R package, and essentially you could submit this to CRAN - although I wouldn't recommend that you do, you now understand a fundamental process:

1. Edit R files
2. Run `devtools::load_all()`
3. Check R files work as you expect
4. If not, run steps 1-3 as needed
5. If your code is working how you want, run `devtools::check()` to really make sure you've got everything working

Now let's discuss another important topic - how to add other dependencies!
