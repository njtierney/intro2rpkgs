# Exporting and documenting your functions

We've just tried to use our new `praise()` function, but it doesn't work!

The reason is that we need to tell R to export it, so that it becomes available when we do:

```r
library(praise)
```

Now, you might have noticed that you can source, or run the code to get access to the function. But this is similar, but actually different to exporting the code.

You can think of exporting like only running the code for very select parts of your package - and only making certain parts available to the user when they run `library(pkgname)`. 

Exporting is a special process in R, and we make our function available by _exporting it_.

::: {.callout-caution title="Why do we need to export the code?" collapse="true"}

One of the reasons we don't want to make all of the code that you wrote available to the user is that if every package we loaded also loaded all objects created in all of the R package, then there's a chance it might start to interfere with someone elses code. We want to avoid that by being really specific about which functions are available to the user.

:::



Install + Restart Plus extra restart Try and run praise() it in the console Doesn’t work - and the reason is...that we need to tell R to export it (brief aside about why exporting is necessary) What is roxygen? A way to add information to a function. + how to use it How to export a function - `#' @export` before the function Install + restart Praise works! Now you try Add rest of documentation (@title, @description) Check documentation `?praise` Now you try Expand on documentation Add an argument to the function Let’s make it that we can use a name Run devtools::check() Warning - DESCRIPTION Wait, what have we created? What are all of these files and folders? DESCRIPTION Live edit the DESCRIPTION Add the details Title Author Maintainer Description License (usethis::use_mit_license()) - Check out tldrlegal https://tldrlegal.com/ What is the folder structure? What are we even looking at? Run devtools::check() They could submit this right now!

## The workflow of package development

One of the major workflows during R package development is this:

1.  Edit R functions
2.  `load_all()` (or keyboard shortcut Ctrl/Cmd+Shift+L)
3.  Edit R functions.

::: {.callout-tip title="Cheatsheets" collapse="true"}
There is a great [cheatsheet for package development](https://rstudio.github.io/cheatsheets/html/package-development.html) that I had stapled to my cubicle wall during my PhD. The website now is very useful, but make sure to check out [the PDF](https://rstudio.github.io/cheatsheets/package-development.pdf).
:::

Let's try out our R package. To do this, I'm going to recommend you create a special R file, sometimes called a "scratch file". It lives inside a folder called `inst`, which is typically not touched by R package building. This is a useful trick if you want to have a way to play around with some R code, keeping it inside your R package.

::: {.callout-note title="Workflow ideas: a scratch file" collapse="true"}
Sometimes you want to have a little scratch pad to write all your practice code. One place where you can do this is in a "scratch" file.

Create a scratch file:

1.  Create a directory `inst`
2.  Inside that directory, create an R file called `scratch.R` (note that this can actually be called anything, but `scratch.R` is what I use)
3.  Write `library(praiseme)` inside `scratch.R`
:::

Does this work for you?

Let's pick this up in the next section, "How to use extra packages"
